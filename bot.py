from scholarly import scholarly
import random
from pyrogram import Client, filters
import os


bot_token = os.environ['BOT_TOKEN']
api_hash = os.environ['API_HASH']
api_id = os.environ['API_ID']

TARGET = -1002010173960

app = Client(
    "my_bot",
    api_id=api_id, api_hash=api_hash,
    bot_token=bot_token
)


def welcome():
    # Filter in only new_chatmembers updates generated in TARGET chat @app.on_message(filters.chat(TARGET))
    keywords = [
            "Biomaterials",
            "Bioinformatics",
            "Biomedical Imaging",
            "Biomimetics",
            "Tissue Engineering",
            "Medical Devices",
            "Neuroengineering",
            "Biosensors",
            "Bioprinting",
            "Clinical Engineering",
            "Rehabilitation Engineering",
            "Bioelectrics",
            "Biomechanics",
            "Nanomedicine",
            "Regenerative Medicine",
            "Biomedical Signal Processing",
            "Genetic Engineering",
            "Pharmacokinetics",
            "Medical Robotics",
            "Wearable Health Technology",
            "Telemedicine",
            "Cardiovascular Engineering",
            "Orthopaedic Bioengineering",
            "Prosthetics and Implants",
            "Biochemical Engineering",
            "Optical Imaging",
            "Molecular Imaging",
            "Artificial Organs",
            "Cancer Bioengineering",
            "Human-Computer Interaction in Healthcare"
        ]

    selected_keyword = random.choice(keywords)
    search_query = scholarly.search_pubs(selected_keyword)
    articles = [next(search_query) for _ in range(5)]
    random_article = random.choice(articles)

    abstract = random_article['bib'].get('abstract', 'No abstract available')

    RESUKLT = f"Title: **{random_article['bib']['title']}**\n\n" \
            f"Abstract: {abstract}\n\n" \
            f"Author(s): **{random_article['bib']['author']}**\n\n" \
            f"Year: {random_article['bib']['pub_year']}\n" \
            f"Link: {random_article['pub_url']}\n\n" \
            "ðŸ¥‡ This message was generated by **[DiaraColab search engine](https://github.com/mehranalam)** and the articles were received from google scholar."
    # Build the new members list (with mentions) by using their first_name
    # Build the welcome message by using an emoji and the list we built above
    # Send the welcome message, without the web page preview

    return RESUKLT

async def main():
    async with app:
        # Send a message, Markdown is enabled by default
        await app.send_message(TARGET ,welcome(), disable_web_page_preview=True)

app.run(main())  # Automatically start() and idle()
